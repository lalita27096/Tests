package com.team22.backend.Controller;
import com.team22.backend.Entity.*;
import com.team22.backend.Repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;

@RestController
@CrossOrigin(origins = "http://localhost:4200")

public class ReviewController {
    @Autowired
    private ReviewRepository reviewRepository;
    @Autowired
    private CustomerRepository customerRepository;
    @Autowired
    private PayMentRepository payMentRepository;
    @Autowired
    private HistoryReviewController historyReviewController;

    public ReviewController(ReviewRepository reviewRepository,CustomerRepository customerRepository,PayMentRepository payMentRepository, HistoryReviewController historyReviewController) {
        this.reviewRepository = reviewRepository;
        this.customerRepository = customerRepository;
        this.payMentRepository = payMentRepository;
        this.historyReviewController = historyReviewController;
    }
    @GetMapping("/review")
    public Collection<Review> review() {
        return reviewRepository.findAll().stream()
                .collect(Collectors.toList());
    }
    //@GetMapping("/PaymentReview")
    //public Collection<Review> review() {
    //    return reviewRepository.findAll().stream()
    //            .filter(this::isReview)
    //            .collect(Collectors.toList());
    //}
    //private boolean isReview(Review review){

     //   return product.getStatus().getStatusProduct().equals("Selling");
    //}

    @PostMapping("/Rev/{customerID}/{customerName}/{reviewDate}/{reviewLevel}/{reviewComment}")
        public Review newRev(@PathVariable String productID,@PathVariable String productName,@PathVariable Integer productPrice,@PathVariable String customerID,@PathVariable String staffIDs,@PathVariable String sellingDate){
            Selling newSelling = new Selling();
            Product product = productRepository.findByProductIds(productID);
            Customer customer = customerRepository.findByCustomerIDs(customerID);
            Staff staff = staffRepository.findByStaffIds(staffIDs);
        }

}